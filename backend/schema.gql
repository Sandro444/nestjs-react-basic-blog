# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type File {
  id: Float!
  name: String!
  url: String!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Comment {
  id: Float!
  body: String!
  createdAt: DateTime!
  author: User!
  blog: Blog!
}

type Blog {
  id: Float!
  title: String!
  content: String!
  createdAt: DateTime!
  author: User!
  comments: [Comment!]!
  file: File
}

type Role {
  id: Float!
  name: String!
}

type User {
  id: Float!
  username: String!
  email: String!
  password: String!
  createdAt: DateTime!
  comments: [Comment!]!
  role: Role!
}

type UserType {
  username: String
  password: String
}

type JwtTokenType {
  access_token: String
}

type Query {
  finduser: UserType!
  getString: String!
  getCurrentUser: User!
  getAllUsers: [User!]!
  allBlogs(filter: AllBlogsFilterInput): [Blog!]!
  getOneBlog(record: GetOneBlogRecord!): Blog!
}

input AllBlogsFilterInput {
  take: Int
  skip: Int
  createdAtSort: SortEnum
}

enum SortEnum {
  ASC
  DESC
}

input GetOneBlogRecord {
  id: Int!
}

type Mutation {
  logIn(args: Args!): JwtTokenType!
  registerUser(args: RegisterUserInput!): User!
  createBlog(record: CreateBlogRecord!): Blog!
  updateBlog(record: UpdateBlogRecord!): Blog!
  deleteBlog(record: GetOneBlogRecord!): String!
  uploadFile(file: Upload!): Int!
  assignRole(record: AssignRoleRecord!): Boolean!
  createComment(record: CreateCommentRecord!): Comment!
}

input Args {
  username: String!
  password: String!
}

input RegisterUserInput {
  username: String
  email: String
  password: String
  repeatPassword: String
}

input CreateBlogRecord {
  title: String!
  content: String!
  author: Int
  file: Int
}

input UpdateBlogRecord {
  id: Int!
  title: String
  content: String
  author: Int
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AssignRoleRecord {
  userId: Int!
  roleName: RoleTypes!
}

enum RoleTypes {
  User
  Publisher
  Administrator
}

input CreateCommentRecord {
  body: String!
  blog: Int!
  author: Int
}

type Subscription {
  commentAdded: Comment!
}
